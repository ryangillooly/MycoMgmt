@page "/spawn/list"
@using MycoMgmt.Domain.Models.Mushrooms
@using Newtonsoft.Json

<h2>Spawn</h2>

<button class="btn btn-primary @previousButton" @onclick="PreviousPage">Previous</button>
<button class="btn btn-primary @nextButton" @onclick="NextPage">Next</button>

<br/>
<br/>

<i><b>Page @pageNumber (@resultCount results)</b></i>
<br/>
<br/>

<div>
    <label for="filter">Filter:</label>
    <input type="text" id="filter" @bind="Filter" />
</div>
<br/>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Strain</th>
            <th>Location</th>
            <th>Parent</th>
            <th>Innoculated On</th>
            <th>Created By</th>
            <th>Created On</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in FilteredData)
        {
            <tr>
                <td><b><u><a href="/spawn/{id]">@item.Name (@item.EntityType)</a></u></b></td>
                <td>@item.Strain</td>
                <td>@item.Location</td>
                @if (item.Parent is null)
                {
                    <td></td>
                }
                else
                {
                    <td>@item.Parent (@item.ParentType)</td>
                }
                
                @if (item.InoculatedOn is null || item.InoculatedOn.Value.Year == 1)
                {
                    <td></td>
                }
                else
                {
                    <td>@DateTime.Parse(item.InoculatedOn.ToString())</td>
                }
                <td>@item.CreatedBy</td>
                <td>@item.CreatedOn</td>
                <td>@item.Status</td>
            </tr>
        }
    </tbody>
</table>

@functions {
    private static string Filter { get; set; }
    private static int skip = 0;
    private static int limit = 10;
    public int pageNumber = 1;
    public static int resultCount;
    public string previousButton = "disabled";
    public static string nextButton;

    private static List<Culture> Data { get; set; } = new ();
    
    private static IEnumerable<Culture> FilteredData
    {
        get
        {
            if (string.IsNullOrEmpty(Filter))
            {
                resultCount = Data.Count();
                return Data.AsEnumerable();
            }
            else
            {
                var data = Data.AsEnumerable().Where(item => item.Name.ToUpper().Contains(Filter.ToUpper()));
                resultCount = data.Count();
                return data;
            }
        }
    }
    
    private static HttpClient _httpClient;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = new HttpClient();
        await LoadData(skip, limit);
    }

    private async Task PreviousPage()
    {
        switch (pageNumber)
        {
            case 1:
                return;
            case 2:
                previousButton = "disabled";
                break;
        }

        skip -= limit;
        pageNumber--;
        await LoadData(skip, limit);
        
        if (resultCount == 0) previousButton = "";
    }

    private async Task NextPage()
    {
        if (resultCount < limit) return;
        if (pageNumber == 1) previousButton = "";  
        
        skip += limit;
        pageNumber++;
        await LoadData(skip, limit);
    }

    private static async Task LoadData(int skip, int limit)
    {
        var response = await _httpClient.GetAsync($"http://localhost:6002/spawn?skip={skip}&limit={limit}");
        var responseContent = await response.Content.ReadAsStringAsync();
        Data = JsonConvert.DeserializeObject<List<Culture>>(responseContent);
        resultCount = Data.Count;

        if (resultCount < limit)
            nextButton = "disabled";
        else
            nextButton = "";
    }
}
