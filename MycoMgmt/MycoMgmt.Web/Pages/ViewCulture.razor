@page "/culture/{name}"
@using Neo4j.Driver
@inject NavigationManager NavigationManager
@using MycoMgmt.API.Models

@MyComponent(MyList)

@functions 
{
    // Define a RenderFragment<T> property to hold the component
    public RenderFragment<List<string>> MyComponent { get; set; }

    private List<string> MyList { get; set; } = new List<string>();
    
    [Parameter]
    public string name { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        MyComponent = (List<string> list) =>
        {
            return builder =>
            {
                foreach (var text in list)
                {
                     // Add the <p> tag to the component
                    builder.OpenElement(0, "p");
                    builder.AddContent(1, text);
                    builder.CloseElement();    
                    
                    // Add the <p> tag to the component
                    builder.OpenElement(0, "p");
                    builder.AddContent(1, text);
                    builder.CloseElement();    
                }
            };
        };
        
        var neo4jDriver = GraphDatabase.Driver("neo4j://localhost:7687", AuthTokens.Basic("rg", "rg"));

            // Use a try/catch block to handle any exceptions that may be thrown
        try
        {
                // Open a new session with the Neo4j database
            using (var session = neo4jDriver.AsyncSession(o => o.WithDatabase("mycomgmt")))
            {
             // Execute a Cypher query asynchronously using the Session.RunAsync() method
                var result = await session.RunAsync($"MATCH (c:Culture {{ Name: '{name}' }}) RETURN c");
       
                var records = await result.ToListAsync();
                // Process the results of the query
                var hasNext = await result.FetchAsync();

                foreach (var record in records)
                {
                    var obj = record["c"].As<INode>();
                    var culture = new Culture()
                    {
                        Name     = obj.Properties["Name"].ToString(),
                        Type     = Enum.Parse<CultureTypes>(obj.Properties["Type"].ToString()),
                        Location = Enum.Parse<Locations>(obj.Properties["Location"].ToString()),
                        Strain   = Enum.Parse<Strain>(obj.Properties["Strain"].ToString())
                    };
                    
                // Access the values of the returned record
                    var node = record["c"].As<INode>();
                    Console.WriteLine(node.Properties["Name"]);
                    MyList.Add(node.Properties["Name"].ToString());
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            // Dispose of the driver when finished
            neo4jDriver.Dispose();
        }
    }
}