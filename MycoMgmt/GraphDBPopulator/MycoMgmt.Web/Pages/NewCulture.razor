@page "/culture/new"
@using MycoMgmt.Populator.Models
@using Neo4j.Driver
@using MycoMgmt.API.Helpers
@using Microsoft.AspNetCore.Components
@using MycoMgmt.API
@using MycoMgmt.Populator

<EditForm Model="@culture" OnValidSubmit="@onvalidsubmitcode" xmlns="http://www.w3.org/1999/html">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h2><b>Culture</b></h2>
    <br/>
    <div class="form-group">
        <label>Name:</label>
        <br/>
        <InputText @bind-Value="(culture.Name)" />
    </div>
    
    <div class="form-group">
        <label>Type:</label>
        <br/>
         <select class="form-control" @bind="culture.Type">
            <option value="@(CultureTypes.Agar)"> @CultureTypes.Agar </option>
            <option value="@(CultureTypes.LiquidCulture)"> @CultureTypes.LiquidCulture </option>
            <option value="@(CultureTypes.SporePrint)"> @CultureTypes.SporePrint </option>
            <option value="@(CultureTypes.SporeSyringe)"> @CultureTypes.SporeSyringe </option>
        </select>
    </div>
    
    <div class="form-group">
        <label>Strain:</label>
        <br/>
         <select class="form-control" @bind="culture.Strain">
             <option value="@(Strain.Mazapatec)"> @Strain.Mazapatec </option>
             <option value="@(Strain.BPlus)"> @Strain.BPlus </option>
             <option value="@(Strain.GoldenTeacher)"> @Strain.GoldenTeacher </option>
        </select>
    </div>
    
    <div class="form-group">
        <label>Recipe:</label>
        <br/>
        <select class="form-control" @bind="culture.Recipe">
            <option value="null">  </option>
            <option value="Blue Transparent Agar"> Blue Transparent Agar </option>
        </select>
    </div>
    
    <div class="form-group">
        <label>Location:</label>
        <br/>
       
        <select class="form-control" @bind="culture.Location">
            <option value="@(Locations.Fridge)"> @(Locations.Fridge) </option>
            <option value="@(Locations.GrowTent)"> @(Locations.GrowTent) </option>
            <option value="@(Locations.IncubationChamber)"> @(Locations.IncubationChamber) </option>
            <option value="@(Locations.WineCooler)"> @(Locations.WineCooler) </option>
            <option value="@(Locations.LongTermStorage)"> @(Locations.LongTermStorage) </option>
        </select>
    </div>
    
    <div class="form-group">
        <label>Successful:</label>
        <br/>
        <InputCheckbox @bind-Value="(culture.Successful)" />
    </div>
    
    <div class="form-group">
        <label>Finished:</label>
        <br/>
        <InputCheckbox @bind-Value="(culture.Finished)" />
    </div>
    
    <button type="submit" class="btn-dark">Submit</button>
</EditForm>
    

@code 
{
    static IDriver driver = GraphDatabase.Driver("neo4j://localhost:7687", AuthTokens.Basic("test", "test"));
    public IAsyncSession session = driver.AsyncSession(o => o.WithDatabase("test"));
    
    private Culture culture { get; set; } = new Culture();

    private void onvalidsubmitcode()
    {
        var isSuccessful = culture.IsSuccessful();
        var isPurchase = culture.IsPurchase();
        var type = ":" + culture.Type;
        var name = culture.Name;
        var id = culture.Id;
        var location = culture.Location.ToString();
        var strain = culture.Strain.ToString();
        
        session.CreateCulture(id ,name, isSuccessful, type, isPurchase);
        session.CreateLocation(id, location);

        
        // if (string.IsNullOrEmpty(culture.Parent))
       // {
         //   session.CreateParentRelationship(culture.Id, );
        //}

        
        // Map Culture > Location Stored
        var query = $@" MATCH 
                             (c:Culture{isSuccessful}{type}{isPurchase} {{ Name: '{name}' }}),
                             (l:Location {{ Name: '{location}'}})
                        MERGE
                            (c)-[:STORED_IN]->(l)";
        
        session.WriteToDatabase(query);
        
        var linkStrain = $@" MATCH 
                                 (c:Culture{isSuccessful}{type}{isPurchase} {{ Name: '{name}' }}),
                                 (s:Strain {{ Name: '{strain}' }})
                             MERGE
                                 (c)-[:IS_STRAIN]->(s)";
        
        session.WriteToDatabase(linkStrain);

        /*
        session.WriteToDatabase(
         $@"MATCH 
                (c:Culture{culture.IsSuccessful()}{':' + culture.Type}{culture.IsPurchase()} {{ Name: '{culture.Name}' }}),
                (p:)
            MERGE
                (c)-[:HAS_PARENT]->(p)"
        );
        */
    }

   
}